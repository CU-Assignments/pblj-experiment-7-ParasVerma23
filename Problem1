Aim: Build a program to perform CRUD operations (Create, Read, Update, Delete) on a database table Product with columns:
ProductID, ProductName, Price, and Quantity.
The program should include:
Menu-driven options for each operation.
Transaction handling to ensure data integrity.

Code: import java.sql.*;
import java.util.Scanner;

public class ProductCRUD {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASS = "your_password";

    private static Connection conn;

    public static void main(String[] args) {
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            conn.setAutoCommit(false); // For transaction handling
            Scanner sc = new Scanner(System.in);
            int choice;

            do {
                System.out.println("\n====== Product CRUD Menu ======");
                System.out.println("1. Create Product");
                System.out.println("2. Read All Products");
                System.out.println("3. Update Product");
                System.out.println("4. Delete Product");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                choice = sc.nextInt();

                switch (choice) {
                    case 1: createProduct(sc); break;
                    case 2: readProducts(); break;
                    case 3: updateProduct(sc); break;
                    case 4: deleteProduct(sc); break;
                    case 5: System.out.println("Exiting..."); break;
                    default: System.out.println("Invalid choice.");
                }
            } while (choice != 5);

            sc.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Create
    private static void createProduct(Scanner sc) {
        try {
            System.out.print("Enter Product ID: ");
            int id = sc.nextInt();
            sc.nextLine(); // consume newline

            System.out.print("Enter Product Name: ");
            String name = sc.nextLine();

            System.out.print("Enter Price: ");
            double price = sc.nextDouble();

            System.out.print("Enter Quantity: ");
            int qty = sc.nextInt();

            String sql = "INSERT INTO Product (ProductID, ProductName, Price, Quantity) VALUES (?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, id);
            pst.setString(2, name);
            pst.setDouble(3, price);
            pst.setInt(4, qty);

            pst.executeUpdate();
            conn.commit();
            System.out.println("Product added successfully.");
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException ex) { ex.printStackTrace(); }
            System.out.println("Error adding product: " + e.getMessage());
        }
    }

    // Read
    private static void readProducts() {
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM Product");

            System.out.println("\n--- Product List ---");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("ProductID")
                        + ", Name: " + rs.getString("ProductName")
                        + ", Price: " + rs.getDouble("Price")
                        + ", Quantity: " + rs.getInt("Quantity"));
            }
        } catch (SQLException e) {
            System.out.println("Error reading products: " + e.getMessage());
        }
    }
    private static void updateProduct(Scanner sc) {
        try {
            System.out.print("Enter Product ID to update: ");
            int id = sc.nextInt();

            System.out.print("Enter new Price: ");
            double price = sc.nextDouble();

            System.out.print("Enter new Quantity: ");
            int qty = sc.nextInt();

            String sql = "UPDATE Product SET Price = ?, Quantity = ? WHERE ProductID = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setDouble(1, price);
            pst.setInt(2, qty);
            pst.setInt(3, id);

            int rows = pst.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Product updated successfully.");
            } else {
                System.out.println("Product not found.");
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException ex) { ex.printStackTrace(); }
            System.out.println("Error updating product: " + e.getMessage());
        }
    }
    private static void deleteProduct(Scanner sc) {
        try {
            System.out.print("Enter Product ID to delete: ");
            int id = sc.nextInt();

            String sql = "DELETE FROM Product WHERE ProductID = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, id);

            int rows = pst.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Product deleted successfully.");
            } else {
                System.out.println("Product not found.");
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException ex) { ex.printStackTrace(); }
            System.out.println("Error deleting product: " + e.getMessage());
        }
    }
}

Output: ====== Product CRUD Menu ======
1. Create Product
2. Read All Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 1
Enter Product ID: 101
Enter Product Name: Keyboard
Enter Price: 799.99
Enter Quantity: 50
Product added successfully.

====== Product CRUD Menu ======
1. Create Product
2. Read All Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 2

--- Product List ---
ID: 101, Name: Keyboard, Price: 799.99, Quantity: 50

====== Product CRUD Menu ======
1. Create Product
2. Read All Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 3
Enter Product ID to update: 101
Enter new Price: 749.99
Enter new Quantity: 60
Product updated successfully.

====== Product CRUD Menu ======
1. Create Product
2. Read All Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 4
Enter Product ID to delete: 101
Product deleted successfully.

====== Product CRUD Menu ======
1. Create Product
2. Read All Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 5
Exiting...


