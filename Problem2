Aim:  Develop a Java application using JDBC and MVC architecture to manage student data. The application should:
Use a Student class as the model with fields like StudentID, Name, Department, and Marks.
Include a database table to store student data.
Allow the user to perform CRUD operations through a simple menu-driven view.
Implement database operations in a separate controller class.

Code: import java.sql.*;
import java.util.*;

// ===================== MODEL =====================
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student() {}

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }
}

// ===================== CONTROLLER =====================
class StudentController {
    private final String URL = "jdbc:mysql://localhost:3306/your_database"; // Replace with your DB
    private final String USER = "your_username"; // Replace with your username
    private final String PASS = "your_password"; // Replace with your password

    private Connection connect() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASS);
    }

    public void addStudent(Student s) {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (Connection conn = connect(); PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setInt(1, s.getStudentID());
            pst.setString(2, s.getName());
            pst.setString(3, s.getDepartment());
            pst.setDouble(4, s.getMarks());
            pst.executeUpdate();
            System.out.println("‚úÖ Student added successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Student> getAllStudents() {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        try (Connection conn = connect(); Statement st = conn.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            while (rs.next()) {
                Student s = new Student(rs.getInt("StudentID"), rs.getString("Name"),
                        rs.getString("Department"), rs.getDouble("Marks"));
                list.add(s);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public void updateStudent(Student s) {
        String sql = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (Connection conn = connect(); PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setString(1, s.getName());
            pst.setString(2, s.getDepartment());
            pst.setDouble(3, s.getMarks());
            pst.setInt(4, s.getStudentID());
            int rows = pst.executeUpdate();
            if (rows > 0)
                System.out.println("‚úÖ Student updated successfully.");
            else
                System.out.println("‚ùå Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID = ?";
        try (Connection conn = connect(); PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setInt(1, id);
            int rows = pst.executeUpdate();
            if (rows > 0)
                System.out.println("‚úÖ Student deleted successfully.");
            else
                System.out.println("‚ùå Student not found.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// ===================== VIEW =====================
class StudentView {
    private final Scanner sc = new Scanner(System.in);
    private final StudentController controller = new StudentController();

    public void showMenu() {
        int choice;
        do {
            System.out.println("\n===== üéì Student Management System =====");
            System.out.println("1. Add Student");
            System.out.println("2. View Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> addStudent();
                case 2 -> viewStudents();
                case 3 -> updateStudent();
                case 4 -> deleteStudent();
                case 5 -> System.out.println("üëã Exiting the application...");
                default -> System.out.println("‚ùó Invalid choice. Try again.");
            }
        } while (choice != 5);
    }

    private void addStudent() {
        System.out.print("Enter Student ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Department: ");
        String dept = sc.nextLine();
        System.out.print("Enter Marks: ");
        double marks = sc.nextDouble();

        Student s = new Student(id, name, dept, marks);
        controller.addStudent(s);
    }

    private void viewStudents() {
        List<Student> students = controller.getAllStudents();
        if (students.isEmpty()) {
            System.out.println("üö´ No students found.");
        } else {
            System.out.println("\n--- Student List ---");
            for (Student s : students) {
                System.out.println("ID: " + s.getStudentID() + ", Name: " + s.getName()
                        + ", Dept: " + s.getDepartment() + ", Marks: " + s.getMarks());
            }
        }
    }

    private void updateStudent() {
        System.out.print("Enter Student ID to update: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter New Name: ");
        String name = sc.nextLine();
        System.out.print("Enter New Department: ");
        String dept = sc.nextLine();
        System.out.print("Enter New Marks: ");
        double marks = sc.nextDouble();

        Student s = new Student(id, name, dept, marks);
        controller.updateStudent(s);
    }

    private void deleteStudent() {
        System.out.print("Enter Student ID to delete: ");
        int id = sc.nextInt();
        controller.deleteStudent(id);
    }
}

// ===================== MAIN =====================
public class StudentApp {
    public static void main(String[] args) {
        StudentView view = new StudentView();
        view.showMenu();
    }
}

SQL: CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(100),
    Marks DOUBLE
);

Output: 
===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 1
Enter Student ID: 101
Enter Name: Alice
Enter Department: CSE
Enter Marks: 89.5
Student added successfully.

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 2

--- Student List ---
ID: 101, Name: Alice, Dept: CSE, Marks: 89.5

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 3
Enter Student ID to update: 101
Enter New Name: Alice B
Enter New Department: CSE
Enter New Marks: 92.0
Student updated successfully.

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 2

--- Student List ---
ID: 101, Name: Alice B, Dept: CSE, Marks: 92.0

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 4
Enter Student ID to delete: 101
Student deleted successfully.

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 2
No students found.

===== Student Management System =====
1. Add Student
2. View Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 5
Exiting the application...
